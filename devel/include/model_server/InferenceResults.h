// Generated by gencpp from file model_server/InferenceResults.msg
// DO NOT EDIT!


#ifndef MODEL_SERVER_MESSAGE_INFERENCERESULTS_H
#define MODEL_SERVER_MESSAGE_INFERENCERESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model_server
{
template <class ContainerAllocator>
struct InferenceResults_
{
  typedef InferenceResults_<ContainerAllocator> Type;

  InferenceResults_()
    : structure()
    , inferences()  {
    }
  InferenceResults_(const ContainerAllocator& _alloc)
    : structure(_alloc)
    , inferences(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _structure_type;
  _structure_type structure;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _inferences_type;
  _inferences_type inferences;





  typedef boost::shared_ptr< ::model_server::InferenceResults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_server::InferenceResults_<ContainerAllocator> const> ConstPtr;

}; // struct InferenceResults_

typedef ::model_server::InferenceResults_<std::allocator<void> > InferenceResults;

typedef boost::shared_ptr< ::model_server::InferenceResults > InferenceResultsPtr;
typedef boost::shared_ptr< ::model_server::InferenceResults const> InferenceResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_server::InferenceResults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_server::InferenceResults_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::model_server::InferenceResults_<ContainerAllocator1> & lhs, const ::model_server::InferenceResults_<ContainerAllocator2> & rhs)
{
  return lhs.structure == rhs.structure &&
    lhs.inferences == rhs.inferences;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::model_server::InferenceResults_<ContainerAllocator1> & lhs, const ::model_server::InferenceResults_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace model_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::model_server::InferenceResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_server::InferenceResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_server::InferenceResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_server::InferenceResults_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_server::InferenceResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_server::InferenceResults_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_server::InferenceResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "794290d6a80514eaeded7ed9f07c9d16";
  }

  static const char* value(const ::model_server::InferenceResults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x794290d6a80514eaULL;
  static const uint64_t static_value2 = 0xeded7ed9f07c9d16ULL;
};

template<class ContainerAllocator>
struct DataType< ::model_server::InferenceResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_server/InferenceResults";
  }

  static const char* value(const ::model_server::InferenceResults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_server::InferenceResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] structure\n"
"float32[]   inferences\n"
;
  }

  static const char* value(const ::model_server::InferenceResults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_server::InferenceResults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.structure);
      stream.next(m.inferences);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InferenceResults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_server::InferenceResults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_server::InferenceResults_<ContainerAllocator>& v)
  {
    s << indent << "structure[]" << std::endl;
    for (size_t i = 0; i < v.structure.size(); ++i)
    {
      s << indent << "  structure[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.structure[i]);
    }
    s << indent << "inferences[]" << std::endl;
    for (size_t i = 0; i < v.inferences.size(); ++i)
    {
      s << indent << "  inferences[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.inferences[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_SERVER_MESSAGE_INFERENCERESULTS_H

// Generated by gencpp from file model_server/ModelRequestResponse.msg
// DO NOT EDIT!


#ifndef MODEL_SERVER_MESSAGE_MODELREQUESTRESPONSE_H
#define MODEL_SERVER_MESSAGE_MODELREQUESTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <model_server/InferenceResults.h>

namespace model_server
{
template <class ContainerAllocator>
struct ModelRequestResponse_
{
  typedef ModelRequestResponse_<ContainerAllocator> Type;

  ModelRequestResponse_()
    : results()  {
    }
  ModelRequestResponse_(const ContainerAllocator& _alloc)
    : results(_alloc)  {
  (void)_alloc;
    }



   typedef  ::model_server::InferenceResults_<ContainerAllocator>  _results_type;
  _results_type results;





  typedef boost::shared_ptr< ::model_server::ModelRequestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_server::ModelRequestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ModelRequestResponse_

typedef ::model_server::ModelRequestResponse_<std::allocator<void> > ModelRequestResponse;

typedef boost::shared_ptr< ::model_server::ModelRequestResponse > ModelRequestResponsePtr;
typedef boost::shared_ptr< ::model_server::ModelRequestResponse const> ModelRequestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_server::ModelRequestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_server::ModelRequestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::model_server::ModelRequestResponse_<ContainerAllocator1> & lhs, const ::model_server::ModelRequestResponse_<ContainerAllocator2> & rhs)
{
  return lhs.results == rhs.results;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::model_server::ModelRequestResponse_<ContainerAllocator1> & lhs, const ::model_server::ModelRequestResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace model_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::model_server::ModelRequestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_server::ModelRequestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_server::ModelRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_server::ModelRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_server::ModelRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_server::ModelRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_server::ModelRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6af076944b82152d7ca8f015f76ac624";
  }

  static const char* value(const ::model_server::ModelRequestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6af076944b82152dULL;
  static const uint64_t static_value2 = 0x7ca8f015f76ac624ULL;
};

template<class ContainerAllocator>
struct DataType< ::model_server::ModelRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_server/ModelRequestResponse";
  }

  static const char* value(const ::model_server::ModelRequestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_server::ModelRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "InferenceResults    results\n"
"\n"
"\n"
"================================================================================\n"
"MSG: model_server/InferenceResults\n"
"int32[] structure\n"
"float32[]   inferences\n"
;
  }

  static const char* value(const ::model_server::ModelRequestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_server::ModelRequestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelRequestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_server::ModelRequestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_server::ModelRequestResponse_<ContainerAllocator>& v)
  {
    s << indent << "results: ";
    s << std::endl;
    Printer< ::model_server::InferenceResults_<ContainerAllocator> >::stream(s, indent + "  ", v.results);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_SERVER_MESSAGE_MODELREQUESTRESPONSE_H
